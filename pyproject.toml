[project]
name = "ip-claim"
version = "0.1.0"
description = "IP Claim Project"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "aiofiles>=24.1.0",
    "beanie>=1.29.0",
    "loguru>=0.7.3",
    "motor>=3.7.1",
    "omegaconf>=2.3.0",
    "pymongo>=4.13.0",
    "returns>=0.25.0",
    "types-aiofiles>=24.1.0.20250516",
    "types-pycurl>=7.45.6.20250309",
    "types-pyopenssl>=24.1.0.20240722",
    "types-requests>=2.32.0.20250515",
]
[dependency-groups]
dev = [
    "black>=25.1.0",
    "ipykernel>=6.29.5",
    "jupyter>=1.1.1",
    "mypy>=1.15.0",
    "ruff>=0.11.10",
]
test = [
    "pytest>=8.3.5",
]
[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

[project.scripts]
generate-schemas = "scripts.hupd_importer:main"

[tool.black]
line-length = 100
preview = true
skip-string-normalization = true # we use '
target-version = [ 'py312' ]
# Exclude intentionally bad files:
extend-exclude = '''
(
  tests/.*/__snapshots__/.* | tests/fixtures/.*
)
'''
[tool.ruff]
# Ruff config: https://docs.astral.sh/ruff/settings
src = ["src"]
preview = true
fix = true
target-version = "py312"
line-length = 100
extend-exclude = [
  # Intentionally bad code:
  "tests/**/__snapshots__/**",
  "tests/fixtures/**",
]

[tool.ruff.format]
quote-style = "single"
docstring-code-format = true

[tool.ruff.lint]
select = [
  "A",    # flake8-builtins
  "B",    # flake8-bugbear
  "C4",   # flake8-comprehensions
  "C90",  # maccabe
  "COM",  # flake8-commas
  "D",    # pydocstyle
  "DTZ",  # flake8-datetimez
  "E",    # pycodestyle
  "ERA",  # flake8-eradicate
  "EXE",  # flake8-executable
  "F",    # pyflakes
  "FBT",  # flake8-boolean-trap
  "FLY",  # pyflint
  "FURB", # refurb
  "G",    # flake8-logging-format
  "I",    # isort
  "ICN",  # flake8-import-conventions
  "ISC",  # flake8-implicit-str-concat
  "LOG",  # flake8-logging
  "N",    # pep8-naming
  "PERF", # perflint
  "PIE",  # flake8-pie
  "PL",   # pylint
  "PT",   # flake8-pytest-style
  "PTH",  # flake8-use-pathlib
  "Q",    # flake8-quotes
  "RET",  # flake8-return
  "RSE",  # flake8-raise
  "RUF",  # ruff
  "S",    # flake8-bandit
  "SIM",  # flake8-simpify
  "SLF",  # flake8-self
  "SLOT", # flake8-slots
  "T100", # flake8-debugger
  "TRY",  # tryceratops
  "UP",   # pyupgrade
  "W",    # pycodestyle
  "YTT",  # flake8-2020
]
ignore = [
  "A005",   # allow to shadow stdlib and builtin module names
  "COM812", # trailing comma, conflicts with `ruff format`
  # Different doc rules that we don't really care about:
  "D100",
  "D104",
  "D106",
  "D203",
  "D212",
  "D401",
  "D404",
  "D405",
  "ISC001",  # implicit string concat conflicts with `ruff format`
  "ISC003",  # prefer explicit string concat over implicit concat
  "PLR09",   # we have our own complexity rules
  "PLR2004", # do not report magic numbers
  "PLR6301", # do not require classmethod / staticmethod when self not used
  "TRY003",  # long exception messages from `tryceratops`
]
external = [ "WPS" ]

# Plugin configs:
flake8-import-conventions.banned-from = [ "ast" ]
flake8-quotes.inline-quotes = "single"
mccabe.max-complexity = 6
pydocstyle.convention = "google"

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = [
  "S101", # asserts
  "S105", # hardcoded passwords
  "S404", # subprocess calls are for tests
  "S603", # do not require `shell=True`
  "S607", # partial executable paths
]
"wemake_python_styleguide/compat/nodes.py" = [ "ICN003", "PLC0414" ]
"wemake_python_styleguide/types.py" = [ "D102" ]
"wemake_python_styleguide/visitors/ast/*.py" = [ "N802" ]

[tool.pytest.ini_options]
# pytest config: http://doc.pytest.org/en/latest/customize.html
testpaths = ["test"]
norecursedirs = "sqlalchemy_models"
python_files = "test_*.py"
# Strict `@xfail` by default:
xfail_strict = true
# Fail on warnings:
filterwarnings = [ "error" ]

addopts = [
  "--strict-config",
  "--strict-markers",
  "--doctest-modules",
  # Custom ignored dirs with bad code:
  "--ignore=tests/fixtures",
  "--ignore=docs",
]

[tool.coverage.run]
# Coverage configuration: https://coverage.readthedocs.io/

# We don't need to cover some files. They are fully checked with mypy.
# And don't contain any logic.
omit = [
  # All version specific tests:
  "tests/**/*312.py",
  "tests/**/*313.py"
]

# Here we specify plugins for coverage to be used:
plugins = [
  "covdefaults",
]

[tool.mypy]
# The mypy configurations: http://bit.ly/2zEl9WI
files = ["src"]
ignore_missing_imports = true
strict = true
local_partial_types = true
warn_unreachable = true

enable_error_code = [
  "truthy-bool",
  "truthy-iterable",
  "redundant-expr",
  "unused-awaitable",
  # "ignore-without-code",
  "possibly-undefined",
  "redundant-self",
  # "explicit-override",
  # "mutable-override",
  "unimported-reveal",
  "deprecated",
]

disable_error_code = [
  "no-untyped-def", # TODO: fix
]

[[tool.mypy.overrides]]
module = "wemake_python_styleguide.compat.nodes"
# We allow explicit `Any` only in this file, because of the compatibility:
disallow_any_explicit = false

[[tool.mypy.overrides]]
module = "wemake_python_styleguide.compat.packaging"
# We allow unused `ignore` comments, because we cannot sync it between versions:
warn_unused_ignores = false
